name: Build and Verify Container
on:
  pull_request:
    branches: [ "main" ]
env:
  IMAGE_NAME: godot4-omnibuilder3d
  GODOT_VERSION: 4.1.1
  RELEASE_NAME: stable
  EXPORT_NAME: omnibuilder_test_project
  PROJECT_PATH: test_project
jobs:
  meta:
    name: Determine build state
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Get git version set up
      - name: Fetch all history for all tags and branches
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git fetch --prune --unshallow
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0
        id: gitversion
        with:
          useConfigFile: true
      
      - name: Write repo owner
        id: write_image_owner
        run: echo IMAGE_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> "$GITHUB_OUTPUT"
      
      - name: Write Image tag from Godot Version
        run:  echo IMAGE_TAG=$(echo ${{ env.RELEASE_NAME != 'stable' && format('.{0}', env.RELEASE_NAME) || '' }}) >> $GITHUB_ENV

      - name: Output image name for test project build
        id: write_image_tag
        run: echo "image_tag=${{ steps.gitversion.outputs.semVer }}-${{ env.GODOT_VERSION }}${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"
    
    outputs:
      image_owner: ${{ steps.write_image_owner.image_owner }}
      image_name: ${{ env.IMAGE_NAME }}
      image_tag: ${{ steps.write_image_tag.image_tag }}
      semVer: ${{ steps.gitversion.outputs.semVer }}

  build_image:
    name: Build Image
    runs-on: ubuntu-latest
    needs: meta
    steps:
      - name: Show outputed state
        run: |
          echo image owner: ${{ needs.meta.outputs.image_owner }}
          echo image name:  ${{ needs.meta.outputs.image_name }}
          echo image tag:   ${{ needs.meta.outputs.image_tag }}
          echo semver:      ${{ needs.meta.outputs.semVer }}

      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry 
        uses: docker/login-action@v1.14.1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v2.9.0
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ needs.meta.outputs.image_owner }}/${{ needs.meta.outputs.image_name }}:${{ needs.meta.outputs.image_tag }}
          build-args: |
            GODOT_VERSION=${{ env.GODOT_VERSION }}
            RELEASE_NAME=${{ env.RELEASE_NAME }}
    
  
  build_project_linux:
    name: Build Test Project (Linux)
    needs: 
      - meta
      - build_image
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ needs.meta.outputs.image_owner }}/${{ needs.meta.outputs.image_name }}
      env:
        EXPORT_NAME: omnibuilder_test_project
        PROJECT_PATH: test_project
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Linux Build
        run: |
          cd $PROJECT_PATH
          apply_version_info.sh
          mkdir -v -p build/linux
          godot --headless -d -v --export-release "Linux/X11" build/linux/$EXPORT_NAME-${{ needs.meta.outputs.semVer }}.x86_64
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: linux
          path: build/linux
  
  build_project_windows:
    name: Build Test Project (Windows Desktop)
    needs: 
      - meta
      - build_image
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ needs.meta.outputs.image_owner }}/${{ needs.meta.outputs.image_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Windows Build
        run: |
          cd $PROJECT_PATH
          apply_version_info.sh
          mkdir -v -p build/windows
          godot --headless -v --export-release "Windows Desktop" build/windows/$EXPORT_NAME-${{ needs.meta.outputs.semVer }}.exe
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: windows
          path: build/windows
